<div x-data="adminDashboard()" x-init="init()">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Email Gateway Dashboard</h1>
        <p class="mt-2 text-gray-600">Monitor email delivery status and system health</p>
    </div>

    <!-- System Health Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- System Status -->
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-heartbeat text-2xl" :class="health.status === 'healthy' ? 'text-green-500' : 'text-red-500'"></i>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">System Status</dt>
                            <dd class="text-lg font-medium text-gray-900" x-text="health.status || 'Unknown'"></dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Queue Depth -->
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-list-ul text-2xl text-blue-500"></i>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Queue Depth</dt>
                            <dd class="text-lg font-medium text-gray-900" x-text="queueDepth || 0"></dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sent Messages -->
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-paper-plane text-2xl text-green-500"></i>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Sent Today</dt>
                            <dd class="text-lg font-medium text-gray-900" x-text="sentCount || 0"></dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Failed Messages -->
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-triangle text-2xl text-red-500"></i>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Failed Today</dt>
                            <dd class="text-lg font-medium text-gray-900" x-text="failedCount || 0"></dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Messages Table -->
    <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <div class="px-4 py-5 sm:px-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
                <i class="fas fa-envelope mr-2"></i>
                Recent Messages
            </h3>
            <p class="mt-1 max-w-2xl text-sm text-gray-500">
                Latest email messages and their delivery status
            </p>
        </div>
        <div class="border-t border-gray-200">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message ID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">To</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Provider</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <template x-for="message in recentMessages" :key="message.messageId">
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900" x-text="message.messageId"></td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full" 
                                          :class="'status-' + message.status.toLowerCase()" 
                                          x-text="message.status"></span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" x-text="getRecipientEmail(message.toJson)"></td>
                                <td class="px-6 py-4 text-sm text-gray-900 max-w-xs truncate" x-text="message.subject"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" x-text="message.provider || 'N/A'"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" x-text="formatDate(message.createdAt)"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <a :href="'/admin/messages/' + message.messageId" 
                                       class="text-indigo-600 hover:text-indigo-900">
                                        <i class="fas fa-eye mr-1"></i>
                                        View
                                    </a>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Refresh Button -->
    <div class="mt-6 flex justify-end">
        <button @click="refreshData()" 
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <i class="fas fa-sync-alt mr-2" :class="loading ? 'animate-spin' : ''"></i>
            Refresh Data
        </button>
    </div>
</div>

<script>
function adminDashboard() {
    return {
        health: {},
        recentMessages: [],
        stats: [],
        queueDepth: 0,
        sentCount: 0,
        failedCount: 0,
        loading: false,

        async init() {
            await this.refreshData();
        },

        async refreshData() {
            this.loading = true;
            try {
                const response = await fetch('/admin/api/data');
                const data = await response.json();
                
                this.health = data.health;
                this.recentMessages = data.recentMessages;
                this.stats = data.stats;
                this.queueDepth = data.queueDepth;
                
                // Calculate counts from stats
                this.sentCount = data.stats.find(s => s.status === 'SENT')?._count?.status || 0;
                this.failedCount = data.stats.find(s => s.status === 'FAILED')?._count?.status || 0;
            } catch (error) {
                console.error('Failed to refresh data:', error);
            } finally {
                this.loading = false;
            }
        },

        getRecipientEmail(toJson) {
            try {
                const recipients = JSON.parse(toJson);
                return recipients[0]?.email || 'N/A';
            } catch {
                return 'N/A';
            }
        },

        formatDate(dateString) {
            return new Date(dateString).toLocaleString();
        }
    }
}

// Make refreshData available globally for auto-refresh
window.refreshData = function() {
    const dashboard = document.querySelector('[x-data]').__x;
    if (dashboard && dashboard.refreshData) {
        dashboard.refreshData();
    }
};
</script>
