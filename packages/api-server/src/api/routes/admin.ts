import { FastifyInstance } from 'fastify';
import { AdminController } from '../controllers/admin';
import { generateMarkdownViewer } from '../../templates/admin/markdown-viewer';

export async function adminRoutes(fastify: FastifyInstance) {
  const adminController = new AdminController();

  // Redirect /admin to React dashboard
  fastify.get('/admin', async (request, reply) => {
    return reply.redirect('/admin/dashboard');
  });

  // Redirect /admin/template-editor to React template editor
  fastify.get('/admin/template-editor', async (request, reply) => {
    return reply.redirect('/admin/templates/editor');
  });

  // Frontend configuration endpoint
  fastify.get('/admin/config.js', async (request, reply) => {
    const config = {
      JWT_TOKEN: process.env.JWT_TOKEN || null,
      API_BASE_URL: process.env.API_BASE_URL || request.protocol + '://' + request.hostname + (request.url.includes(':3000') ? ':3000' : ''),
      DEBUG: process.env.NODE_ENV === 'development',
      VERSION: '1.0.0'
    };

    const configScript = `
      // Frontend Configuration - Generated by backend
      window.ENV = ${JSON.stringify(config, null, 2)};
      
      // Log configuration (only in debug mode)
      if (window.ENV.DEBUG) {
        console.log('ðŸ”§ Frontend configuration loaded:', window.ENV);
      }
    `;

    return reply.type('application/javascript').send(configScript);
  });

  // API client endpoint
  fastify.get('/admin/api-client.js', async (request, reply) => {
    const fs = require('fs');
    const path = require('path');
    const apiClientPath = path.join(__dirname, '../../templates/admin/api-client.js');
    try {
      const apiClient = fs.readFileSync(apiClientPath, 'utf8');
      return reply.type('application/javascript').send(apiClient);
    } catch (error) {
      return reply.code(404).send('API client file not found');
    }
  });

  

  // Documentation viewer route
  fastify.get('/docs/:filename', async (request, reply) => {
    const fs = require('fs');
    const path = require('path');
    const { filename } = request.params as { filename: string };
    
    try {
      const filePath = path.join(process.cwd(), 'docs', filename);
      const content = fs.readFileSync(filePath, 'utf8');
      
      // Generate HTML with markdown viewer
      const html = generateMarkdownViewer(filename, content);
      return reply.type('text/html').send(html);
    } catch (error) {
      return reply.code(404).send('Documentation not found');
    }
  });

  // Postman collection download route
  fastify.get('/Email-Gateway-API.postman_collection.json', async (request, reply) => {
    const fs = require('fs');
    const path = require('path');
    
    try {
      const filePath = path.join(process.cwd(), 'Email-Gateway-API.postman_collection.json');
      const content = fs.readFileSync(filePath, 'utf8');
      
      return reply
        .type('application/json')
        .header('Content-Disposition', 'attachment; filename="Email-Gateway-API.postman_collection.json"')
        .send(content);
    } catch (error) {
      return reply.code(404).send('Postman collection not found');
    }
  });
  
  // API endpoint for real-time data
  fastify.get('/admin/api/data', adminController.getApiData.bind(adminController));
  
  // Webhook events endpoints
  fastify.get<{ Params: { messageId: string } }>('/admin/api/webhooks/:messageId', adminController.getWebhookEvents.bind(adminController));
  fastify.get('/admin/api/webhooks', adminController.getRecentWebhookEvents.bind(adminController));
  
  // Search by recipient endpoint (HTML version for old admin)
  fastify.get<{ Querystring: { email: string; page?: string; limit?: string } }>('/admin/search', adminController.searchByRecipient.bind(adminController));
  
  // Search by recipient endpoint (JSON API version for React admin)
  fastify.get<{ Querystring: { email: string; page?: string; limit?: string } }>('/admin/api/search', adminController.searchByRecipientJson.bind(adminController));
  
  // Message details endpoint (JSON API version for React admin)
  fastify.get<{ Params: { messageId: string } }>('/admin/api/messages/:messageId', adminController.getMessageDetailsJson.bind(adminController));

  // Send test email endpoint (no authentication required for admin testing)
  fastify.post('/admin/send-test-email', async (request, reply) => {
    try {
      const emailData = request.body as any;
      console.log('ðŸ“§ Admin Test Email Received:', JSON.stringify(emailData, null, 2));
      
      // Validate required fields
      if (!emailData.to || !Array.isArray(emailData.to) || emailData.to.length === 0) {
        return reply.code(400).send({ error: 'Missing or invalid "to" field' });
      }
      
      if (!emailData.subject) {
        return reply.code(400).send({ error: 'Missing "subject" field' });
      }
      
      if (!emailData.template) {
        return reply.code(400).send({ error: 'Missing "template" field' });
      }
      
      // Import required modules
      const { EmailQueueProducer } = await import('../../queue/producer');
      const { prisma } = await import('../../db/client');
      const { v4: uuidv4 } = await import('uuid');
      
      const queueProducer = new EmailQueueProducer();
      
      // Generate a unique message ID for the test email
      const messageId = `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // Extract metadata
      const tenantId = emailData.metadata?.tenantId || 'admin_test';
      
      // Store message in database first (like the main email controller does)
      await prisma.message.create({
        data: {
          messageId,
          tenantId,
          toJson: emailData.to,
          subject: emailData.subject,
          templateKey: emailData.template.key,
          locale: emailData.template.locale,
          variablesJson: emailData.variables || {},
          status: 'QUEUED',
          webhookUrl: undefined,
          attempts: 0
        }
      });
      
      // Transform data to match EmailJobData interface
      const testEmailData = {
        messageId,
        templateKey: emailData.template.key,
        locale: emailData.template.locale,
        version: emailData.template.version,
        variables: emailData.variables || {},
        to: emailData.to,
        cc: emailData.cc,
        bcc: emailData.bcc,
        from: emailData.from,
        replyTo: emailData.replyTo,
        subject: emailData.subject,
        attachments: emailData.attachments,
        webhookUrl: process.env.WEBHOOK_BASE_URL ? `${process.env.WEBHOOK_BASE_URL}/webhooks/routee` : undefined,
        tenantId,
        attempts: 0
      };
      
      console.log('ðŸ“§ Final Test Email Data for Queue:', JSON.stringify(testEmailData, null, 2));
      
      // Send to queue
      await queueProducer.addEmailJob(testEmailData);
      
      return reply.send({ 
        success: true, 
        messageId,
        message: 'Test email queued successfully' 
      });
      
    } catch (error) {
      console.error('Error sending test email:', error);
      return reply.code(500).send({ 
        error: 'Failed to send test email',
        details: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  });

}
